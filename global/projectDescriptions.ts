import {
  sendBkydRestoAmplifyConversion,
  sendBkydRestoConversion,
  sendGitHubBkydRestoAmplifyConversion,
  sendGitHubBkydRestoConversion,
  sendGitHubSaviConversion,
  sendGitHubTTGConversion,
  sendSaviConversion,
  sendTTGConversion,
} from "../utilities";
export interface Project {
  title: string;
  technologies: string[];
  purpose: string;
  details: string;
  href: string;
  images: string[];
  gitHubRepo: string;
  eventFunction: () => void;
  gitHubEventFunction: () => void;
}

export const projectDescriptions: Project[] = [
  {
    title: `BackyardRestoration.net (AWS-Amplify)`,
    technologies: [
      `Typescript`,
      `React`,
      `React-Router`,
      `Redux`,
      `Node.js`,
      `Express.js`,
      `Node-Fetch`,
      `AWS Amplify`,
      `AWS Cognito`,
      `AWS Route 53`,
      `AWS AppSync`,
      `AWS IAM`,
      `AWS Parameter Store`,
      `AWS DynamoDB`,
      `AWS Lambda`,
      `AWS API Gateway`,
      `D3.js`,
      `CSS`,
      `Sass/SCSS`,
      `RegEx`,
      `git`,
      `GitHub`,
      `Postman`,
      `Figma`,
      `Heroku`,
      `HTML5`,
      `Stripe`,
    ],
    purpose: `The purpose of this project was to bring my BackyardRestoration.net app up-to-date with recent changes to React-Router and Redux best-practices, and to provide myself an entrypoint into the world of AWS serverless architecture.`,
    details: `The frontend is built on React.js utilizing React-Redux for state management and React-Router for navigation/routing. Prior to coding, the UI was wire-framed using Figma and all styling was completed using Sass/SCSS using mobile-first design principles. Backend infrastructure was re-built using serverless architecture leveraging AWS Amplify and associated technologies. Upon registration, the user’s address is converted into coordinates using Google’s Geocoding API. This is then used to calculate four additional coordinates representing progressively larger ellipsoidal WGS84 bounding boxes until a NOAA weather station is identified (via NOAA’s V2 API) that is capable of delivering the required 10 years of minimum and maximum daily temperature data necessary to accurately calculate local hardiness zone. This is subsequently used to calibrate all weed management actions to the user’s growing season within the D3.js weed management timeline. All API requests are conducted using node-fetch or the AWS Amplify API, and user authentication and password reset functionality is provided via AWS Cognito. The native plant search API was created leveraging GraphQL via AWS AppSync, enabling users to select native plants from associated Dynamo DB tables that are most appropriate for their site conditions. The optional donation page uses the Stripe API to securely accept credit card payments. Growing parameter calculation and stripe functionalities are encapsulated within a serverless Express.js backend via AWS Lambda. All non-compiled code was written in Typescript.`,
    href: `https://backyardrestoration.net`,
    images: [
      `/media/br-amplify/1-Weeds_Amplify_Desktop.png`,
      `/media/br-amplify/2-Weeds_Amplify_Mobile.png`,
      `/media/br-amplify/3-Registration_Amplify_Desktop.png`,
      `/media/br-amplify/4-Registration_Amplify_Mobile.png`,
      `/media/br-amplify/5-Email_Confirmation_Amplify_Desktop.png`,
      `/media/br-amplify/6-Email_Confirmation_Amplify_Mobile.png`,
      `/media/br-amplify/7-Password_Reset_Amplify_Desktop.png`,
      `/media/br-amplify/8-Password_Reset_Amplify_Mobile.png`,
    ],
    gitHubRepo: `https://github.com/djkoser/backyard_restoration/tree/main`,
    eventFunction: sendBkydRestoAmplifyConversion,
    gitHubEventFunction: sendGitHubBkydRestoAmplifyConversion,
  },
  {
    title: `SaviSquirrelNest.com`,
    technologies: [
      `Typescript`,
      `React`,
      `Next.js`,
      `Node.js`,
      `AWS Amplify`,
      `Nodemailer`,
      `Node-Fetch`,
      `AWS Amplify`,
      `AWS Route 53`,
      `CSS`,
      `Sass`,
      `git`,
      `GitHub`,
      `Google Analytics`,
      `Google Tag Manager`,
      `Google ReCAPTCHA v3`,
    ],
    purpose: `This project is designed to provide my wife with a way to engage her crochet and art community, grow her business and expand her web presence. In the future, she hopes to offer free and paid-for digital content via this platform (feature additions to follow).`,
    details: `Relatively speaking, this is a frontend-heavy project with plans to incorporate additional backend functionalities as necessary according to the needs of the client (my wife). Next.js was leveraged to create the frontend and backend components which were subsequently deployed and hosted via AWS Amplify. Routing was accomplished via Next.js pages. Styling and mobile optimization was completed leveraging Sass modules. The form component is protected via Google ReCAPTCHA v3 and utilizes Nodemailer to send messages to the my wife's business email address. In order to provide insights into site traffic, popular pages, etcetera, advanced page analytics were implemented via Google Tag Manager and Google Analytics. Numerous custom events were created to track events of interest, including Instagram views and Square store visits. Future plans include additional backend endpoints (leveraging Next.js API endpoints which are written in Node.js and Typescript), Redux state management, more advanced SEO, and other additions as needs arise.`,
    href: `https://savisquirrelnest.com`,
    images: [
      `/media/saviSquirrelNest/1_Homepage.png`,
      `/media/saviSquirrelNest/2_ContactForm.png`,
      `/media/saviSquirrelNest/3_EventsAndProjects.png`,
      `/media/saviSquirrelNest/4_AboutMe.png`,
      `/media/saviSquirrelNest/5_HomepageMobile.png`,
      `/media/saviSquirrelNest/6_ContactPageMobile.png`,
      `/media/saviSquirrelNest/7_EventsAndProjectsMobile.png`,
      `/media/saviSquirrelNest/8_AboutMeMobile.png`,
    ],
    gitHubRepo: `https://github.com/djkoser/savisquirrelnest`,
    eventFunction: sendSaviConversion,
    gitHubEventFunction: sendGitHubSaviConversion,
  },
  {
    title: `BackyardRestoration.net (Server Architecture)`,
    technologies: [
      `Typescript`,
      `JavaScript`,
      `React`,
      `React-Router`,
      `Redux`,
      `Node.js`,
      `Express.js`,
      `PostgreSQL`,
      `Massive.js`,
      `D3.js`,
      `CSS`,
      `Sass/SCSS`,
      `git`,
      `GitHub`,
      `Postman`,
      `Figma`,
      `Heroku`,
      `HTML5`,
      `Bcrypt.js`,
      `Axios`,
      `Stripe`,
      `Nodemailer`,
      `PL/pgSQL`,
    ],
    purpose: `Given my background in biology, horticulture and ecological restoration, I have long been interested in creating a website that would empower land owners and managers to complete their own ecological restoration projects. Very often, the costs associated with ecological restoration services are extremely high, thus preventing the average land owner or manager from undertaking projects that might otherwise make a positive environmental difference. The purpose of BackyardRestoration.net is to provide these individuals with some of the tools necessary to make a positive environmental impact, specifically: a weed identification and management method selection tool, a weed management timeline and a native species selection tool (all native species in my database are currently local to the Upper Midwest, which is my area of expertise). This project was originally completed by myself over the course of approximately four weeks including debugging and functionality add-ons.`,
    details: `The frontend is built on React.js utilizing React-Redux for state management and React-Router for navigation/routing. Prior to coding, the website was wire-framed using Figma and all styling was completed using Sass/SCSS using mobile-first design principles. Backend infrastructure was built on Node.js in conjunction with Express.js to handle endpoints and Massive.js to interface with a Heroku PostgreSQL database. Upon registration, the user’s address is converted into coordinates using Google’s Geocoding API. This is then used to calculate four additional coordinates representing progressively larger ellipsoidal WGS84 bounding boxes until a NOAA weather station is identified (via NOAA’s V2 API) that is capable of delivering the required 10 years of minimum and maximum daily temperature data. This weather data is subsequently used to calculate the user’s USDA hardiness zone and calibrate all weed management actions to the user’s growing season within the D3.js weed management timeline. All API requests are conducted using Axios, and user authentication and password reset functionality is built using Bcrypt.js and Nodemailer. The native plant search API was created using Node.js and PL/pgSQL, enabling users to select native plants from the Heroku database that are most appropriate for their site conditions. The optional donation page uses the Stripe API to securely accept credit card payments.`,
    href: `https://github.com/djkoser/backyard_restoration/tree/feature/traditionalServerArchitecture`,
    images: [
      `/media/br/backyardRestoration1.png`,
      `/media/br/backyardRestoration2.png`,
      `/media/br/backyardRestoration3.png`,
      `/media/br/backyardRestoration4.png`,
      `/media/br/backyardRestoration5.png`,
      `/media/br/backyardRestoration6.png`,
      `/media/br/backyardRestoration7.png`,
      `/media/br/backyardRestoration8.png`,
      `/media/br/backyardRestoration9.png`,
      `/media/br/backyardRestoration10.png`,
    ],
    gitHubRepo: `https://github.com/djkoser/backyard_restoration/tree/feature/traditionalServerArchitecture`,
    eventFunction: sendBkydRestoConversion,
    gitHubEventFunction: sendGitHubBkydRestoConversion,
  },
  {
    title: `TopTableGames.net`,
    technologies: [
      `TypeScript`,
      `JavaScript`,
      `React`,
      `React-Router`,
      `Redux`,
      `Node.js`,
      `Express.js`,
      `PostgreSQL`,
      `Massive.js`,
      `Chart.js`,
      `CSS`,
      `Sass/SCSS`,
      `Emotion.js`,
      `git`,
      `GitHub`,
      `Postman`,
      `Figma`,
      `bit.io`,
      `HTML5`,
      `Bcrypt.js`,
      `Axios`,
      `Stripe`,
      `Nodemailer`,
    ],
    purpose: `TopTableGames.net was completed by two other developers, including myself, in three weeks. The idea for this project was inspired by my board-game-enthusiast colleagues’ desire to create a place for other board-game enthusiasts to find new games, track their plays, rate games and read reviews. There is a public-facing portion of the site which allows unregistered users to search for games using a number of search criteria, view game details and read associated game reviews. In addition, registered users have the option to add games to their virtual library, track the total number of plays for each game, and rate and review these games, which subsequently become publicly accessible.`,
    details: `The frontend is built on a TypeScript and React.js framework utilizing React-Redux for state management and React-router for navigation/routing. Prior to the start of this project, none of my team members, or myself, were familiar with TypeScript. As a result, the primary challenge of this project was learning and implementing TypeScript on the frontend within the relatively short span of three weeks. Project management and team collaboration was accomplished using git/GitHub Trello and Discord. The website was wire-framed using Figma prior to coding and all styling was completed using Sass/SCSS using mobile-first design principles. Emotion.js was also used to build a number of styled components, including the button and hexagonal game rating components, the latter of which was created by myself. The play count graph within the user’s library page is constructed using Chart.js. As lead backend developer, the entire backend infrastructure was built by myself in Node.js in conjunction with Express.js to handle endpoints and Massive.js to interface with a bit.io, serverless PostgreSQL database. Game information is acquired by querying the BoardgameAtlas.com API and is subsequently combined with user and rating data stored on our database. All API requests are conducted using Axios, and user authentication and password reset functionality was built using Bcrypt.js and Nodemailer.`,
    href: `https://toptablegames.net`,
    images: [
      `/media/ttg/topTableGames1.png`,
      `/media/ttg/topTableGames2.png`,
      `/media/ttg/topTableGames3.png`,
      `/media/ttg/topTableGames4.png`,
      `/media/ttg/topTableGames5.png`,
      `/media/ttg/topTableGames6.png`,
      `/media/ttg/topTableGames7.png`,
      `/media/ttg/topTableGames8.png`,
      `/media/ttg/topTableGames9.png`,
      `/media/ttg/topTableGames10.png`,
    ],
    gitHubRepo: `https://github.com/boardgame-project/boardgame-project`,
    eventFunction: sendTTGConversion,
    gitHubEventFunction: sendGitHubTTGConversion,
  },
];
